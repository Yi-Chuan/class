面向对象第三天
1.继承
  a)继承的格式    class A  extends B{}
  b)继承的功能:  A类将拥有B类中所有的成员属性和成员方法.除了私有成员之外
  c)继承的使用场景:   当自己没有  但是别人有 ,而且我自己还想要的时候, 应该想到继承.

  d)修饰符的访问特征   public  protected   private

                 public      protected     private
  在本类           √             √          √
  在子类           √             √          X
  在类的外部       √             X          X

2.子类对父类方法的重写

  a)子类可以声明一个跟父类方法名同名的方法. 
  b)子类中调用父类的同名方法   parent::方法名();   parent父母  
  c)php只支持单继承,如果需要使用多个类的功能,可以使用链式继承
  class A extends B{}  
  class B extends C{}
  class C extends D{}

3.FSCICATS
 F   =>   final
  1.是一个修饰符,用来修饰类和成员方法
  2.修饰的类不能被其他类继承,  被修饰的成员方法不能被重写
  3.好比是专利修饰符.

S   =>  static
  1.是一个修饰符(静态修饰符)
  2.用来修饰成员属性和成员方法
  3.修饰成员属性
     a)static可以跟PPP修饰符一起修饰成员属性
     b)静态成员属性是作为该类对象的共有属性存在
     c)访问形式 
	a)在类的内部    self::成员属性名
	b)在类外部      类名::成员属性名
   使用场景: 如果一个值需要让当前类的对象进行操作的话, 这个时候可以将值声明成静态成员属性.

   4.修饰成员方法
	a)  static 可以跟PPP修饰符一起来修饰成员方法
	b)  静态成员方法只能操作静态成员  (在静态成员方法中不能使用$this)
	c)  访问形式:
	a)在类的内部  self:: 方法名()
	b)在类的外部   类名:: 方法名();
	d)   静态成员方法的访问的速度比普通的方法要快将近4倍
5.单例模式
	a)不允许脚本在类的外部实例化对象
	a)将构造方法私有化
	b)  需要使用new实例化对象
	声明一个静态的成员方法来进行调用
	c)  保证唯一性
	声明一个静态的成员属性 做存储
C  =>  const
  1.是一个关键字 用来在类的内部声明常量
  2.const A = 100;
  3.常量的访问形式
 	a)在类的内部  self::常量名
	b)在类的外部  类名::常量名

i. instanceof”操作符
 用于检测当前对象实例是否属于某一个类的类型。
 检测当前对象是否为该类或者该类的后辈类的实例化









